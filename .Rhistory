shiny::runApp('Documents/PROJETS/LRproject/Resist_Portal')
runApp('Documents/PROJETS/LRproject/Resist_Portal')
runApp('Documents/PROJETS/LRproject/Resist_Portal')
runApp('Documents/PROJETS/LRproject/Resist_Portal')
setwd("/Users/abesson/Documents/PROJETS/LRproject/Resist_Portal/DATA/")
load(file = "Differential_analysis.RData")
ls()
allData <- load(file = "Differential_analysis.RData")
allData
# to remove DTU part if no need anymore
rm(list=c(allData, "DTUall"))
allData
# to remove DTU part if no need anymore
rm(list = c(allData, "DTUall"))
allData
# to remove DTU part if no need anymore
rm(list = c(DTUall, "allData"))
allData
allData
DTUall
load(file = "Differential_analysis.RData")
save(DGEall,DTEall, file = "Differential_analysis.RData")
load(file = "Differential_analysis.RData")
ls()
toto = load(file = "Differential_analysis.RData")
toto
setwd("..")
DTUall
DTUall <- readRDS("./DATA/All_switchlist_DEXSeq.Rds")
install.packages("isoformswitchanalyzer")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IsoformSwitchAnalyzeR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RcppArmadillo")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IsoformSwitchAnalyzeR")
library(IsoformSwitchAnalyzeR)
runApp()
switch_data <- readRDS("./DATA/All_switchlist_DEXSeq.Rds")
switch_data
runApp()
cancerName = "glioblastoma"
cond1 <- case_when(
cancerName == "Prostate" ~ "prostate_cancer_sensitive",
cancerName == "Glioblastoma" ~ "glioblastoma_sensitive",
cancerName == "Melanoma" ~ "melanoma_sensitive",
cancerName == "Lung"~ "lung_cancer_sensitive"
)
cond1
cancerName = "Glioblastoma"
cond1 <- case_when(
cancerName == "Prostate" ~ "prostate_cancer_sensitive",
cancerName == "Glioblastoma" ~ "glioblastoma_sensitive",
cancerName == "Melanoma" ~ "melanoma_sensitive",
cancerName == "Lung"~ "lung_cancer_sensitive"
)
cond1
cancerName = "Prostate"
if (cancerName == "Prostate") {
cond1 = "prostate_cancer_sensitive"
cond2 = "prostate_cancer_resistant"
} if else (cancerName == "Glioblastoma") {
cancerName = "Prostate"
cond1 <- case_when(
cancerName == "Prostate" ~ "prostate_cancer_sensitive",
cancerName == "Glioblastoma" ~ "glioblastoma_sensitive",
cancerName == "Melanoma" ~ "melanoma_sensitive",
cancerName == "Lung"~ "lung_cancer_sensitive"
)
cond2 <- case_when(
cancerName == "Prostate" ~ "prostate_cancer_resistant",
cancerName == "Glioblastoma" ~ "glioblastoma_resistant",
cancerName == "Melanoma" ~ "melanoma_resistant",
cancerName == "Lung"~ "lung_cancer_resistant"
)
cond1
cond2
cancerName = "Prostate"
cond1 <- case_when(
cancerName == "Prostate" ~ "prostate_cancer_sensitive",
cancerName == "Glioblastoma" ~ "glioblastoma_sensitive",
cancerName == "Melanoma" ~ "melanoma_sensitive",
cancerName == "Lung"~ "lung_cancer_sensitive"
)
cond2 <- case_when(
cancerName == "Prostate" ~ "prostate_cancer_resistant",
cancerName == "Glioblastoma" ~ "glioblastoma_resistant",
cancerName == "Melanoma" ~ "melanoma_resistant",
cancerName == "Lung"~ "lung_cancer_resistant"
)
switch_data = load(file = "Differential_analysis.RData")
setwd("/Users/abesson/Documents/PROJETS/LRproject/Resist_Portal/")
switch_data <- readRDS("./DATA/All_switchlist_DEXSeq.Rds")
switch_data
swPlot_tx <- switchPlotTranscript(
switch_data,
gene = search_term,
condition1 = cond1,
condition2 = cond2,
#IFcutoff = 0.1, alphas = 0.05,
localTheme = theme_bw(base_size = 13) # making text sightly larger for vignette
)
search_term = "SMIM27"
swPlot_tx <- switchPlotTranscript(
switch_data,
gene = search_term,
condition1 = cond1,
condition2 = cond2,
#IFcutoff = 0.1, alphas = 0.05,
localTheme = theme_bw(base_size = 13) # making text sightly larger for vignette
)
swPlot_usage <- switchPlotIsoUsage(
AllSwitch_DE,
gene = search_term,
#IFcutoff = 0.1, alphas = 0.05,
condition1 = cond1,
condition2 = cond2,
localTheme = theme_bw(base_size = 13)
)
swPlot_usage <- switchPlotIsoUsage(
switch_data,
gene = search_term,
#IFcutoff = 0.1, alphas = 0.05,
condition1 = cond1,
condition2 = cond2,
localTheme = theme_bw(base_size = 13)
)
switchPlots <- ggarrange(swPlot_tx, swPlot_usage,
ncol = 1, nrow = 2)
library(ggarrange)
install.packages("ggarrange")
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
switchPlots <- ggarrange(swPlot_tx, swPlot_usage,
ncol = 1, nrow = 2)
View(switchPlots)
View(switchPlots)
ggarrange(swPlot_tx, swPlot_usage,
ncol = 1, nrow = 2)
search_term = "TP53"
swPlot_tx <- switchPlotTranscript(
switch_data,
gene = search_term,
condition1 = cond1,
condition2 = cond2,
#IFcutoff = 0.1, alphas = 0.05,
localTheme = theme_bw(base_size = 13) # making text sightly larger for vignette
)
swPlot_usage <- switchPlotIsoUsage(
switch_data,
gene = search_term,
#IFcutoff = 0.1, alphas = 0.05,
condition1 = cond1,
condition2 = cond2,
localTheme = theme_bw(base_size = 13)
)
switchPlots <- ggarrange(swPlot_tx, swPlot_usage,
ncol = 1, nrow = 2)
ggarrange(swPlot_tx, swPlot_usage,
ncol = 1, nrow = 2)
cancerName = "Glioblastoma"
search_term = "TP53"
cond1 <- case_when(
cancerName == "Prostate" ~ "prostate_cancer_sensitive",
cancerName == "Glioblastoma" ~ "glioblastoma_sensitive",
cancerName == "Melanoma" ~ "melanoma_sensitive",
cancerName == "Lung"~ "lung_cancer_sensitive"
)
cond2 <- case_when(
cancerName == "Prostate" ~ "prostate_cancer_resistant",
cancerName == "Glioblastoma" ~ "glioblastoma_resistant",
cancerName == "Melanoma" ~ "melanoma_resistant",
cancerName == "Lung"~ "lung_cancer_resistant"
)
swPlot_tx <- switchPlotTranscript(
switch_data,
gene = search_term,
condition1 = cond1,
condition2 = cond2,
#IFcutoff = 0.1, alphas = 0.05,
localTheme = theme_bw(base_size = 13) # making text sightly larger for vignette
)
swPlot_usage <- switchPlotIsoUsage(
switch_data,
gene = search_term,
#IFcutoff = 0.1, alphas = 0.05,
condition1 = cond1,
condition2 = cond2,
localTheme = theme_bw(base_size = 13)
)
switchPlots <- ggarrange(swPlot_tx, swPlot_usage,
ncol = 1, nrow = 2)
ggarrange(swPlot_tx, swPlot_usage,
ncol = 1, nrow = 2)
runApp()
runApp()
runApp()
library(dipsaus)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('app_dev.R')
library(shiny); runApp('app_dev.R')
runApp('app_dev.R')
runApp('app_dev.R')
